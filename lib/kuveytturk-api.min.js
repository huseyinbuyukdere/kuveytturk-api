!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("kuveytturk-api",[],t):"object"==typeof exports?exports["kuveytturk-api"]=t():e["kuveytturk-api"]=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"KuveytturkApi",{enumerable:!0,get:function(){return o.default}});var r,o=(r=n(1))&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(2)),o=u(n(6));function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a="",s="",c="",f=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a=t,s=n,c=o}var t,n,u;return t=e,(n=[{key:"getCredentialsToken",value:function(){var e=this;if(r.isValidToken(this.token))return new Promise(function(t){t(e.token.access_token)});var t=[];t.push("public");var n=r.prepareClientCredentialsRequest(t,a,s);return new Promise(function(t,u){var i=r.prepareFetch(n);fetch(o.CLIENT_CREDENTIALS_URL,i).then(function(n){200!=n.status&&u(n.statusText),n.json().then(function(n){e.token={},e.token.access_token=n.access_token,e.token.expiresIn=n.expires_in,e.token.receivedTime=Date.now(),t(n.access_token)})})})}},{key:"fxCurrencyList",value:function(){}},{key:"fxCurrencyRates",value:function(){return this.sendGeneralGetRequest(o.FX_CURRENCY_RATES)}},{key:"kuveytTurkBranchList",value:function(){var e=this;return new Promise(function(t,n){e.getCredentialsToken().then(function(e){var u=r.prepareGeneralRequest(e,void 0,c),i=r.prepareFetch(u);fetch(o.KUVEYT_TURK_BRANCHES,i).then(function(e){200!=e.status&&n(e.statusText),e.json().then(function(e){t(e)})})})})}},{key:"kuveytTurkAtmList",value:function(){var e=this;return new Promise(function(t,n){e.getCredentialsToken().then(function(e){var u=r.prepareGeneralRequest(e,void 0,c),i=r.prepareFetch(u);fetch(o.KUVEYT_TURK_ATMS,i).then(function(e){200!=e.status&&n(e.statusText),e.json().then(function(e){t(e)})})})})}},{key:"kuveytTurkXtmList",value:function(){var e=this;return new Promise(function(t,n){e.getCredentialsToken().then(function(e){var u=r.prepareGeneralRequest(e,void 0,c),i=r.prepareFetch(u);fetch(o.KUVEYT_TURK_XTMS,i).then(function(e){200!=e.status&&n(e.statusText),e.json().then(function(e){t(e)})})})})}},{key:"bankList",value:function(){var e=this;return new Promise(function(t,n){e.getCredentialsToken().then(function(e){var u=r.prepareGeneralRequest(e,void 0,c),i=r.prepareFetch(u);fetch(o.BANK_LIST,i).then(function(e){200!=e.status&&n(e.statusText),e.json().then(function(e){t(e)})})})})}},{key:"bankBranchList",value:function(e,t){var n=this,u=o.BANK_LIST+"/"+e+"/branches",i="?cityId="+t,a=u+i;return new Promise(function(e,t){n.getCredentialsToken().then(function(n){var o=r.prepareGeneralRequest(n,void 0,c,i),u=r.prepareFetch(o);fetch(a,u).then(function(n){200!=n.status&&t(n.statusText),n.json().then(function(t){e(t)})})})})}},{key:"sendGeneralGetRequest",value:function(e,t){var n=this;return new Promise(function(o,u){n.getCredentialsToken().then(function(n){var i=r.prepareGeneralRequest(n,void 0,c,t),a=r.prepareFetch(i);fetch(e,a).then(function(e){200!=e.status&&u(e.statusText),e.json().then(function(e){o(e)})})})})}}])&&i(t.prototype,n),u&&i(t,u),e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prepareClientCredentialsRequest=function(e,t,n){var u={body:"",headers:{}},i={grant_type:"client_credentials"};return i.scope=(0,r.arrayToString)(e),i.client_id=t,i.client_secret=n,u.headers=Object.assign({},u.headers,{"Content-Type":o.URL_ENCODED_TYPE}),u.body=(0,r.JSON_to_URLEncoded)(i),u},t.prepareGeneralRequest=u,t.prepareFetch=i,t.sendGeneralGetRequest=function(e,t,n){new Promise(function(r,o){n().then(function(n){var a=u(n,void 0,e),s=i(a);fetch(t,s).then(function(e){200!=e.status&&o(e.statusText),e.json().then(function(e){r(e)})})})})},t.isValidToken=function(e){if(!e)return!1;var t=Date.now();if((0,r.getSecondsBetweenDates)(t,e.receivedTime)<e.expiresIn)return!0};var r=n(3),o=n(5);function u(e,t,n,o){var u={body:"",headers:{}};return u.body="",t&&(u.body=JSON.stringify(t)),u.headers.Authorization="Bearer "+e,u.headers.Signature=(0,r.generateSignature)(e,u.body,n,o),u.headers=Object.assign({},u.headers,{"Content-Type":"application/json"}),u}function i(e){return e.body?{method:"POST",body:e.body,headers:e.headers}:{method:"GET",headers:e.headers}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.arrayToString=function(e){var t="";return e.forEach(function(e){t+=e+" "}),t=t.substr(0,t.length-1)},t.JSON_to_URLEncoded=function e(t,n,r){r=r||[];if("object"==o(t))for(var u in t)e(t[u],n?n+"["+u+"]":u,r);else r.push(n+"="+encodeURIComponent(t));return r.join("&")},t.generateSignature=function(e,t,n,o){var u=e+t;o&&(u+=o);var i=r.createSign("RSA-SHA256");return i.write(u),i.end(),i.sign(n,"base64")},t.getSecondsBetweenDates=function(e,t){if(e>t)return(e-t)/1e3;return(t-e)/1e3};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(4));function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}},function(e,t){e.exports=require("crypto")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL_ENCODED_TYPE=void 0;t.URL_ENCODED_TYPE="application/x-www-form-urlencoded"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BANK_LIST=t.KUVEYT_TURK_XTMS=t.KUVEYT_TURK_ATMS=t.KUVEYT_TURK_BRANCHES=t.FX_CURRENCY_RATES=t.FX_CURRENCY_LIST=t.CLIENT_CREDENTIALS_URL=t.API_BASE_URL=t.IDENTITY_BASE_URL=void 0;t.IDENTITY_BASE_URL="https://idprep.kuveytturk.com.tr";var r="https://apitest.kuveytturk.com.tr/prep";t.API_BASE_URL=r;t.CLIENT_CREDENTIALS_URL="https://idprep.kuveytturk.com.tr/api/connect/token";t.FX_CURRENCY_LIST="https://apitest.kuveytturk.com.tr/prep/v1/data/fecs";t.FX_CURRENCY_RATES="https://apitest.kuveytturk.com.tr/prep/v1/fx/rates";t.KUVEYT_TURK_BRANCHES="https://apitest.kuveytturk.com.tr/prep/v1/data/branches";t.KUVEYT_TURK_ATMS="https://apitest.kuveytturk.com.tr/prep/v1/data/atms";t.KUVEYT_TURK_XTMS="https://apitest.kuveytturk.com.tr/prep/v1/data/xtms";t.BANK_LIST="https://apitest.kuveytturk.com.tr/prep/v1/data/banks"}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,